{"version":3,"sources":["components/layout/Navbar.jsx","context/contact/contactContext.js","components/contact/ContactItem.js","components/contact/Contact.js","components/contact/ContactForm.js","components/contact/ContactFilter.js","components/pages/Home.jsx","components/pages/About.jsx","context/contact/contactReducer.js","context/types.js","context/contact/contactState.js","context/auth/authContext.js","context/auth/authReducer.js","context/auth/authState.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","title","icon","className","faAddressCard","to","defaultProps","contactContact","createContext","ContactItem","contact","useState","loading","setLoading","contactContext","useContext","ContactContext","name","id","email","phone","type","deleteContact","setCurrent","clearCurrent","style","float","textTransform","faEnvelopeOpen","faPhone","onClick","disabled","deleteHandler","Contact","contacts","filtered","filterContacts","animTime","length","TransitionGroup","map","CSSTransition","key","timeout","classNames","ContactForm","addContact","current","updateContact","setContact","useEffect","changeHandler","e","target","value","onSubmit","preventDefault","placeholder","onChange","defaultChecked","ContactFilter","text","useRef","filterContact","clearFilter","ref","Home","About","contactReducer","state","action","payload","filter","c","regex","RegExp","match","ContactState","props","useReducer","ContactReducer","dispatch","Provider","uuid","done","setTimeout","children","authContext","AuthState","initialState","token","localStorage","getItem","isAuthenticated","error","AuthReducer","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4RAMMA,EAAS,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACrB,OACI,yBAAKC,UAAU,qBACX,4BACI,uBAAGA,UAAWD,IACd,kBAAC,IAAD,CAAiBA,KAAME,MAAkB,IACxCH,GAEL,4BACI,4BACI,kBAAC,IAAD,CAAMI,GAAI,KAAV,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAI,UAAV,aAWpBL,EAAOM,aAAe,CAClBL,MAAO,iBACPC,KAAM,sBAGKF,Q,uBCjCAO,EADQC,0B,eCqDRC,EAhDK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACHC,oBAAS,GADN,mBAC1BC,EAD0B,KACjBC,EADiB,KAE3BC,EAAiBC,qBAAWC,GAC1BC,EAAiCP,EAAjCO,KAAMC,EAA2BR,EAA3BQ,GAAIC,EAAuBT,EAAvBS,MAAOC,EAAgBV,EAAhBU,MAAOC,EAASX,EAATW,KACxBC,EAA4CR,EAA5CQ,cAAeC,EAA6BT,EAA7BS,WAAYC,EAAiBV,EAAjBU,aAQnC,OACI,yBAAKrB,UAAU,iBACX,wBAAIA,UAAU,0BACTc,EADL,IACY,IACR,0BAAMd,UAAW,UAAqB,iBAATkB,EAA0B,gBAAkB,iBACrEI,MAAO,CAAEC,MAAO,QAAQC,cAAc,eAErCN,IAGT,wBAAIlB,UAAU,QACV,4BACKgB,GAAS,oCACN,kBAAC,IAAD,CAAiBjB,KAAM0B,MAAmB,IAAKT,IAGvD,4BACKC,GAAS,oCACN,kBAAC,IAAD,CAAiBlB,KAAM2B,MAAY,IAAKT,IAGhD,4BAAQjB,UAAU,sBAAsB2B,QAAS,kBAAMP,EAAWb,KAAlE,QACCE,EACG,4BAAQmB,UAAQ,EAAC5B,UAAU,yBAA3B,eAEA,4BAAQA,UAAU,wBAAwB2B,QAAS,kBAhC7C,SAACZ,GACnBL,GAAW,GACXS,EAAcJ,GAAI,WACdL,GAAW,MAEfW,IA2BqEQ,CAAcd,KAAvE,aCdLe,G,MAvBC,WACZ,IAAMnB,EAAiBC,qBAAWC,GAC1BkB,EAAuBpB,EAAvBoB,SAAUC,EAAarB,EAAbqB,SACZC,EAAiBD,GAAsBD,EACvCG,EAAWF,EAAW,IAAM,IAClC,OAAwB,IAApBD,EAASI,OACF,kDAGP,oCACI,kBAACC,EAAA,EAAD,KACKH,EAAeI,KAAI,SAAC9B,GACjB,OACI,kBAAC+B,EAAA,EAAD,CAAeC,IAAKhC,EAAQQ,GAAIyB,QAASN,EAAUO,WAAW,QAC1D,kBAAC,EAAD,CAAalC,QAASA,Y,eCoDnCmC,EAtEK,WAChB,IAAM/B,EAAiBC,qBAAWC,GAC1B8B,EAAqDhC,EAArDgC,WAAYC,EAAyCjC,EAAzCiC,QAASC,EAAgClC,EAAhCkC,cAAexB,EAAiBV,EAAjBU,aAFtB,EAGQb,mBAAS,CACnCM,KAAM,GACNE,MAAO,GACPC,MAAO,GACPC,KAAM,aAPY,mBAGfX,EAHe,KAGNuC,EAHM,KASd9B,EAAuBT,EAAvBS,MAAOF,EAAgBP,EAAhBO,KAAMG,EAAUV,EAAVU,MACrB8B,qBAAU,WAEFD,EADAF,GAGW,CACP9B,KAAM,GACNE,MAAO,GACPC,MAAO,GACPC,KAAM,eAGf,CAAC0B,IAEJ,IAAMI,EAAgB,SAACC,GACnBH,EAAW,2BACJvC,GADG,kBACO0C,EAAEC,OAAOpC,KAAOmC,EAAEC,OAAOC,UA4BxCrD,EAAoB,OAAZ8C,EAAmB,iBAAmB,cACpD,OACI,0BAAMQ,SA3BY,SAACH,GACnBA,EAAEI,iBACET,GACAC,EAActC,GACdc,KAGAsB,EAAWpC,GAEfuC,EAAW,CACPhC,KAAM,GACNE,MAAO,GACPC,MAAO,GACPC,KAAM,eAeN,wBAAIlB,UAAU,gBAAgBF,GAC9B,2BAAOoB,KAAK,OAAOoC,YAAY,OAAOxC,KAAK,OAAOqC,MAAOrC,EAAMyC,SAAUP,IACzE,2BAAO9B,KAAK,QAAQoC,YAAY,QAAQxC,KAAK,QAAQqC,MAAOnC,EAAOuC,SAAUP,IAC7E,2BAAO9B,KAAK,OAAOoC,YAAY,QAAQxC,KAAK,QAAQqC,MAAOlC,EAAOsC,SAAUP,IAC5E,4CACA,2BAAO9B,KAAK,QAAQJ,KAAK,OAAOqC,MAAM,WAAWK,gBAAc,EAACD,SAAUP,IAN9E,YAMyG,IACrG,2BAAO9B,KAAK,QAAQJ,KAAK,OAAOqC,MAAM,eAAeI,SAAUP,IAPnE,gBAOkG,IAC9F,2BAAO9B,KAAK,SAASiC,MAAOrD,EAAOE,UAAU,oBAC7C,4BAAQkB,KAAK,SAASlB,UAAU,0BAA0B2B,QApBjD,WACbmB,EAAW,CACPhC,KAAM,GACNE,MAAO,GACPC,MAAO,GACPC,KAAM,aAEVG,MAaI,WCzCGoC,EAvBO,WAClB,IAAM9C,EAAiBC,qBAAWC,GAC5B6C,EAAOC,iBAAO,IACZC,EAAwCjD,EAAxCiD,cAAeC,EAAyBlD,EAAzBkD,YAAY7B,EAAarB,EAAbqB,SACnCe,qBAAU,WACFf,IACA0B,EAAKd,QAAQO,MAAM,MAEzB,IASF,OACI,8BACI,2BAAOjC,KAAK,OAAO4C,IAAKJ,EAAMH,SAVjB,SAACN,GACS,KAAvBS,EAAKd,QAAQO,MACbS,EAAcX,EAAEC,OAAOC,OAGvBU,SCEGE,EAdF,WACT,OACI,yBAAK/D,UAAU,UACX,6BACI,kBAAC,EAAD,OAEJ,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEDgE,EAbH,WACR,OACI,6BACI,8CACA,uBAAGhE,UAAU,QAAb,+CAGA,uBAAGA,UAAU,aACT,4C,gBCqDDiE,EAjDQ,SAACC,EAAOC,GAC3B,OAAQA,EAAOjD,MACX,ICdmB,cDef,OAAO,2BACAgD,GADP,IAEInC,SAAS,GAAD,mBAAMmC,EAAMnC,UAAZ,CAAsBoC,EAAOC,YAE7C,IClBsB,iBDmBlB,OAAO,2BACAF,GADP,IAEInC,SAAUmC,EAAMnC,SAASsC,QAAO,SAAAC,GAAC,OAAIA,EAAEvD,KAAOoD,EAAOC,aAE7D,ICtBmB,cDuBf,OAAO,2BACAF,GADP,IAEItB,QAASuB,EAAOC,UAExB,IC1BqB,gBD2BjB,OAAO,2BACAF,GADP,IAEItB,QAAS,OAEjB,IC9BsB,iBD+BlB,OAAO,2BACAsB,GADP,IAEInC,SAAUmC,EAAMnC,SAASM,KAAI,SAAAiC,GACzB,OAAIA,EAAEvD,KAAOoD,EAAOC,QAAQrD,GACjBoD,EAAOC,QAEXE,OAGnB,ICvCsB,iBDwClB,OAAO,2BACAJ,GADP,IAEIlC,SAAUkC,EAAMnC,SAASsC,QAAO,SAAAC,GAC5B,IAAMC,EAAM,IAAIC,OAAJ,UAAcL,EAAOC,SAAU,MAC3C,OAAOE,EAAExD,KAAK2D,MAAMF,IAAUD,EAAEtD,MAAMyD,MAAMF,QAGxD,IC9CoB,eD+ChB,OAAO,2BACAL,GADP,IAEIlC,SAAU,OAElB,QACI,OAAOkC,IE4BJQ,EAvEM,SAACC,GAClB,IAD4B,EAoDFC,qBAAWC,EAnDhB,CACjB9C,SAAU,CACN,CACI,GAAM,uCACN,KAAQ,QACR,MAAS,2BACT,MAAS,iBACT,KAAQ,YAEZ,CACI,GAAM,uCACN,KAAQ,UACR,MAAS,sCACT,MAAS,iBACT,KAAQ,YAEZ,CACI,GAAM,uCACN,KAAQ,OACR,MAAS,4BACT,MAAS,iBACT,KAAQ,gBAEZ,CACI,GAAM,uCACN,KAAQ,QACR,MAAS,kBACT,MAAS,iBACT,KAAQ,iBAGhBa,QAAS,KACTZ,SAAU,OAjCc,mBAoDrBkC,EApDqB,KAoDdY,EApDc,KAqDpB/C,EAA+BmC,EAA/BnC,SAAUa,EAAqBsB,EAArBtB,QAAQZ,EAAakC,EAAblC,SAC1B,OACI,kBAAC,EAAe+C,SAAhB,CAAyB5B,MAAO,CAC5BpB,WACAa,UACAZ,WACAW,WAvBW,SAACpC,GAChBA,EAAQQ,GAAKiE,cACbF,EAAS,CAAE5D,KDrDQ,cCqDWkD,QAAS7D,KAsBnCY,cApBc,SAACJ,EAAIkE,GACvBC,YAAW,WACPJ,EAAS,CAAE5D,KDxDO,iBCwDekD,QAASrD,IAC1CkE,MACD,MAiBC7D,WAdW,SAACb,GAAD,OAAauE,EAAS,CAAE5D,KD5DpB,cC4DuCkD,QAAS7D,KAe/Dc,aAda,kBAAMyD,EAAS,CAAE5D,KD5Db,mBC2EjB2B,cAjBc,SAACtC,GAAD,OAAauE,EAAS,CAAE5D,KDzDpB,iBCyD0CkD,QAAS7D,KAkBrEqD,cAfc,SAACF,GAAD,OAAUoB,EAAS,CAAE5D,KD3DjB,iBC2DuCkD,QAASV,KAgBlEG,YAfY,kBAAMiB,EAAS,CAAE5D,KD3Db,oBC4EfyD,EAAMQ,WCjFJC,EADK/E,0BCAL,WAAC6D,EAAOC,GAIX,OAHAA,EAAOjD,KAGAgD,GCiBJmB,EAjBG,SAACV,GACf,IAAMW,EAAe,CACjBC,MAAOC,aAAaC,QAAQ,YAC5BC,gBAAiB,KACjBjF,SAAS,EACTkF,MAAM,MALe,EAOCf,qBAAWgB,EAAaN,GAPzB,6BASzB,OACI,kBAAC,EAAYP,SAAb,CAAsB5B,MAAO,IAGxBwB,EAAMQ,WCYJU,MArBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,oCACE,kBAAC,EAAD,MACA,yBAAK7F,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8F,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,SAASC,UAAWhC,WCPlCiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2DCZN4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLsB,QAAQtB,MAAMA,EAAMuB,c","file":"static/js/main.cb9ae912.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAddressCard } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Navbar = ({ title, icon }) => {\r\n    return (\r\n        <div className=\"navbar bg-primary\">\r\n            <h1>\r\n                <i className={icon} /> \r\n                <FontAwesomeIcon icon={faAddressCard} />{\" \"}\r\n                {title}\r\n            </h1>\r\n            <ul>\r\n                <li>\r\n                    <Link to =\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to =\"/about\">About</Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    icon: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Contact Keeper\",\r\n    icon: \"fas fa-id-card-alt\"\r\n}\r\n\r\nexport default Navbar\r\n","import { createContext } from 'react';\r\nconst contactContact = createContext();\r\nexport default contactContact;","import React, { useContext, useState } from 'react';\r\nimport { faEnvelopeOpen } from '@fortawesome/free-regular-svg-icons'\r\nimport { faPhone } from '@fortawesome/free-solid-svg-icons'\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ContactContext from '../../context/contact/contactContext';\r\nconst ContactItem = ({ contact }) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const contactContext = useContext(ContactContext);\r\n    const { name, id, email, phone, type } = contact;\r\n    const { deleteContact, setCurrent, clearCurrent } = contactContext;\r\n    const deleteHandler = (id) => {\r\n        setLoading(true)\r\n        deleteContact(id, () => {\r\n            setLoading(false)\r\n        });\r\n        clearCurrent();\r\n    }\r\n    return (\r\n        <div className=\"card bg-light\">\r\n            <h3 className=\"text-primary text-left\">\r\n                {name} {\" \"}\r\n                <span className={'badge ' + (type === \"professional\" ? \"badge-success\" : \"badge-primary\")}\r\n                    style={{ float: \"right\",textTransform:\"capitalize\" }}\r\n                >\r\n                    {type}\r\n                </span>\r\n            </h3>\r\n            <ul className=\"list\">\r\n                <li>\r\n                    {email && <>\r\n                        <FontAwesomeIcon icon={faEnvelopeOpen} />{\" \"}{email}\r\n                    </>}\r\n                </li>\r\n                <li>\r\n                    {phone && <>\r\n                        <FontAwesomeIcon icon={faPhone} />{\" \"}{phone}\r\n                    </>}\r\n                </li>\r\n                <button className=\"btn btn-dark btn-sm\" onClick={() => setCurrent(contact)}>Edit</button>\r\n                {loading ?\r\n                    <button disabled className=\"btn btn-danger btn-sm\">Deleting...</button>\r\n                    :\r\n                    <button className=\"btn btn-danger btn-sm\" onClick={() => deleteHandler(id)}>Delete</button>\r\n\r\n                }\r\n\r\n            </ul>\r\n        </div >\r\n    )\r\n}\r\nContactItem.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n}\r\nexport default ContactItem;","import React, { useContext } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport ContactContext from '../../context/contact/contactContext';\r\nimport ContactItem from '../contact/ContactItem';\r\nimport FlipMove from 'react-flip-move'\r\nimport './Contact.css'\r\nconst Contact = () => {\r\n    const contactContext = useContext(ContactContext);\r\n    const { contacts, filtered } = contactContext;\r\n    const filterContacts = filtered ? filtered : contacts\r\n    const animTime = filtered ? 200 : 500\r\n    if (contacts.length === 0) {\r\n        return <h4>Please Add Contact</h4>\r\n    }\r\n    return (\r\n        <>\r\n            <TransitionGroup>\r\n                {filterContacts.map((contact) => {\r\n                    return (\r\n                        <CSSTransition key={contact.id} timeout={animTime} classNames=\"item\">\r\n                            <ContactItem contact={contact} />\r\n                        </CSSTransition>\r\n                    )\r\n                })}\r\n                {/* {contacts.length} */}\r\n            </TransitionGroup>\r\n        </ >\r\n    )\r\n}\r\nexport default Contact;","import React, { useState, useContext, useEffect } from 'react';\r\nimport ContactContext from '../../context/contact/contactContext';\r\nconst ContactForm = () => {\r\n    const contactContext = useContext(ContactContext);\r\n    const { addContact, current, updateContact, clearCurrent } = contactContext;\r\n    const [contact, setContact] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        type: \"personal\"\r\n    });\r\n    const { email, name, phone } = contact;\r\n    useEffect(() => {\r\n        if (current) {\r\n            setContact(current);\r\n        } else {\r\n            setContact({\r\n                name: \"\",\r\n                email: \"\",\r\n                phone: \"\",\r\n                type: \"personal\"\r\n            })\r\n        }\r\n    }, [current])\r\n\r\n    const changeHandler = (e) => {\r\n        setContact({\r\n            ...contact, [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    const submitHabdler = (e) => {\r\n        e.preventDefault();\r\n        if (current) {\r\n            updateContact(contact)\r\n            clearCurrent()\r\n        }\r\n        else {\r\n            addContact(contact);\r\n        }\r\n        setContact({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            type: \"personal\"\r\n        })\r\n    }\r\n    const clearAll = () => {\r\n        setContact({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            type: \"personal\"\r\n        })\r\n        clearCurrent()\r\n    }\r\n    const title = current !== null ? \"Update Contact\" : \"Add Contact\";\r\n    return (\r\n        <form onSubmit={submitHabdler}>\r\n            <h2 className=\"text-primary\">{title}</h2>\r\n            <input type=\"text\" placeholder=\"Name\" name=\"name\" value={name} onChange={changeHandler} />\r\n            <input type=\"email\" placeholder=\"Email\" name=\"email\" value={email} onChange={changeHandler} />\r\n            <input type=\"text\" placeholder=\"Phone\" name=\"phone\" value={phone} onChange={changeHandler} />\r\n            <h5>Contact Type</h5>\r\n            <input type=\"radio\" name=\"type\" value=\"personal\" defaultChecked onChange={changeHandler} /> personal{\" \"}\r\n            <input type=\"radio\" name=\"type\" value=\"professional\" onChange={changeHandler} /> Professional{\" \"}\r\n            <input type=\"submit\" value={title} className=\"btn btn-primary\" />\r\n            <button type=\"button\" className=\"btn btn-light btn-block\" onClick={clearAll}>\r\n                Clear\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\nexport default ContactForm","import React, { useContext, useRef, useEffect } from 'react';\r\nimport ContactContext from '../../context/contact/contactContext';\r\nconst ContactFilter = () => {\r\n    const contactContext = useContext(ContactContext);\r\n    const text = useRef(\"\");\r\n    const { filterContact, clearFilter,filtered } = contactContext;\r\n    useEffect(()=>{\r\n        if(!filtered){\r\n            text.current.value=\"\"\r\n        }\r\n    },[])\r\n    const changHandler = (e) => {\r\n        if (text.current.value !== \"\") {\r\n            filterContact(e.target.value)\r\n        }\r\n        else {\r\n            clearFilter();\r\n        }\r\n    }\r\n    return (\r\n        <form>\r\n            <input type=\"text\" ref={text} onChange={changHandler} />\r\n        </form>\r\n    )\r\n}\r\nexport default ContactFilter;","import React from 'react';\r\nimport Contact from '../contact/Contact';\r\nimport ContactForm from '../contact/ContactForm';\r\nimport ContactFilter from '../contact/ContactFilter';\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"grid-2\">\r\n            <div>\r\n                <ContactForm />\r\n            </div>\r\n            <div>\r\n                <ContactFilter />\r\n                <Contact />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home","import React from 'react';\r\nconst About=()=>{\r\n    return (\r\n        <div>\r\n            <h1>About this App</h1>\r\n            <p className=\"my-1\">\r\n                This is full stack app for keeping contacts \r\n            </p>\r\n            <p className=\"bg-dark p\">\r\n                <strong>1.0.0</strong>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\nexport default About","import {\r\n    ADD_CONTACT,\r\n    CLEAR_CURRENT,\r\n    CLEAR_FILTER,\r\n    DELETE_CONTACT,\r\n    FILTER_CONTACT,\r\n    REMOVE_ALERT,\r\n    SET_ALERT,\r\n    SET_CURRENT,\r\n    UPDATE_CONTACT\r\n} from '../types';\r\n\r\n\r\nconst contactReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ADD_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: [...state.contacts, action.payload]\r\n            }\r\n        case DELETE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(c => c.id !== action.payload)\r\n            }\r\n        case SET_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: action.payload\r\n            }\r\n        case CLEAR_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: null\r\n            }\r\n        case UPDATE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(c => {\r\n                    if (c.id === action.payload.id) {\r\n                        return action.payload;\r\n                    }\r\n                    return c;\r\n                })\r\n            }\r\n        case FILTER_CONTACT:\r\n            return {\r\n                ...state,\r\n                filtered: state.contacts.filter(c=>{\r\n                    const regex=new RegExp(`${action.payload}`,\"gi\");\r\n                    return c.name.match(regex) || c.email.match(regex);\r\n                })\r\n            }\r\n        case CLEAR_FILTER:\r\n            return {\r\n                ...state,\r\n                filtered: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default contactReducer;","// Contact\r\nexport const ADD_CONTACT = \"ADD_CONTACT\";\r\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\r\nexport const SET_CURRENT = \"SET_CURRENT\";\r\nexport const CLEAR_CURRENT = \"CLEAR_CURRENT\";\r\nexport const UPDATE_CONTACT = \"UPDATE_CONTACT\";\r\nexport const FILTER_CONTACT = \"FILTER_CONTACT\";\r\nexport const CLEAR_FILTER = \"CLEAR_FILTER\";\r\nexport const SET_ALERT = \"SET_ALERT\";\r\nexport const REMOVE_ALERT = \"REMOVE_ALERT\";\r\n\r\n// Auth\r\n\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const USER_LOAD = \"USER_LOAD\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const lOGIN_FAIL = \"lOGIN_FAIL\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";","import React, { Reducer, useReducer } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport ContactContext from './contactContext';\r\nimport ContactReducer from './contactReducer';\r\nimport {\r\n    ADD_CONTACT,\r\n    CLEAR_FILTER,\r\n    DELETE_CONTACT,\r\n    FILTER_CONTACT,\r\n    REMOVE_ALERT,\r\n    SET_ALERT,\r\n    SET_CURRENT,\r\n    UPDATE_CONTACT,\r\n    CLEAR_CURRENT\r\n} from '../types';\r\n\r\nconst ContactState = (props) => {\r\n    const initialState = {\r\n        contacts: [\r\n            {\r\n                \"id\": \"3D5CE80C-B718-9864-E1BF-239286830592\",\r\n                \"name\": \"Rajah\",\r\n                \"email\": \"pulvinar@liberoProin.net\",\r\n                \"phone\": \"1-441-681-8372\",\r\n                \"type\": 'personal'\r\n            },\r\n            {\r\n                \"id\": \"E6C6CDE4-90D2-6F72-FF25-B86F01FBD93E\",\r\n                \"name\": \"Maxwell\",\r\n                \"email\": \"Phasellus.nulla@velquamdignissim.ca\",\r\n                \"phone\": \"1-188-313-1650\",\r\n                \"type\": 'personal'\r\n            },\r\n            {\r\n                \"id\": \"72B5DFF9-3450-79D4-3170-7B365D75E7BB\",\r\n                \"name\": \"Ivor\",\r\n                \"email\": \"Cum@elitelitfermentum.edu\",\r\n                \"phone\": \"1-880-332-8989\",\r\n                \"type\": 'professional'\r\n            },\r\n            {\r\n                \"id\": \"155D6C9E-322E-274B-4FA3-FB03A60424CE\",\r\n                \"name\": \"Ronan\",\r\n                \"email\": \"Vivamus@Sed.com\",\r\n                \"phone\": \"1-183-113-6232\",\r\n                \"type\": 'professional'\r\n            }\r\n        ],\r\n        current: null,\r\n        filtered: null\r\n    }\r\n\r\n    const addContact = (contact) => {\r\n        contact.id = uuid();\r\n        dispatch({ type: ADD_CONTACT, payload: contact })\r\n    }\r\n    const deleteContact = (id, done) => {\r\n        setTimeout(() => {\r\n            dispatch({ type: DELETE_CONTACT, payload: id });\r\n            done();\r\n        }, 1000);\r\n    }\r\n    const updateContact = (contact) => dispatch({ type: UPDATE_CONTACT, payload: contact })\r\n    const setCurrent = (contact) => dispatch({ type: SET_CURRENT, payload: contact });\r\n    const clearCurrent = () => dispatch({ type: CLEAR_CURRENT });\r\n    const filterContact = (text) => dispatch({ type: FILTER_CONTACT, payload: text })\r\n    const clearFilter = () => dispatch({ type: CLEAR_FILTER })\r\n\r\n    const [state, dispatch] = useReducer(ContactReducer, initialState);\r\n    const { contacts, current,filtered } = state;\r\n    return (\r\n        <ContactContext.Provider value={{\r\n            contacts,\r\n            current,\r\n            filtered,\r\n            addContact,\r\n            deleteContact,\r\n            setCurrent,\r\n            clearCurrent,\r\n            updateContact,\r\n            filterContact,\r\n            clearFilter\r\n        }} >\r\n            {props.children}\r\n        </ContactContext.Provider>\r\n    )\r\n}\r\nexport default ContactState;","import { createContext } from 'react';\r\nconst authContext = createContext();\r\nexport default authContext;","import { } from '../types';\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\nimport {\r\n} from '../types';\r\nconst AuthState = (props) => {\r\n    const initialState = {\r\n        token: localStorage.getItem(\"jwttoken\"),\r\n        isAuthenticated: null,\r\n        loading: true,\r\n        error:null,  \r\n    }\r\n    const [state, dispatch] = useReducer(AuthReducer, initialState);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n\r\n        }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\nexport default AuthState;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/layout/Navbar';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Home from './components/pages/Home';\r\nimport About from './components/pages/About';\r\nimport ContactState from './context/contact/contactState';\r\nimport AuthState from './context/auth/authState';\r\n\r\nfunction App() {\r\n  return (\r\n    <AuthState>\r\n      <ContactState>\r\n        <Router>\r\n          <>\r\n            <Navbar />\r\n            <div className=\"container\">\r\n              <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route exact path=\"/about\" component={About} />\r\n\r\n              </Switch>\r\n            </div>\r\n          </>\r\n        </Router>\r\n      </ContactState>\r\n    </AuthState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}